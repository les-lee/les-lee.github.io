(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{819:function(e,a,r){"use strict";r.r(a);var t=r(43),o=Object(t.a)({},function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"webpack-作者的-webpack-教程-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack-作者的-webpack-教程-3","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack 作者的 webpack 教程(3)")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://medium.com/webpack/the-contributors-guide-to-webpack-part-3-44cc149af02c",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文"),r("OutboundLink")],1),e._v(" (撞墙警告)")]),e._v(" "),r("p",[e._v("这是第三篇,也是目前为止的最后一篇了.")]),e._v(" "),r("h2",{attrs:{id:"概括"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概括","aria-hidden":"true"}},[e._v("#")]),e._v(" 概括")]),e._v(" "),r("p",[e._v("在这个系列的第一部分我们学习了在webpack,和webpack的github 组织(其实就是介绍webpack各个基础库的用途,感兴趣的可以去看一下链接在"),r("a",{attrs:{href:"https://medium.com/webpack/the-contributors-guide-to-webpack-part-1-a0410cc82ca4",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),r("OutboundLink")],1),e._v("),在第二部分,我们介绍了Tapable,学习了一个类似于nodejs 的 EventEmitle的只有2百多行的代码的库,还知道了他掌控着webpack 的整个插件系统.")]),e._v(" "),r("p",[e._v("除此之外,我们知道了webpack 如何去创建tapable 实例(继承Tapable的类),和webpack 如何去注册他们,和执行他们的功能,最后我们学习了每一个在webpack中的tapable实例的功能.")]),e._v(" "),r("h2",{attrs:{id:"构建依赖图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建依赖图","aria-hidden":"true"}},[e._v("#")]),e._v(" 构建依赖图")]),e._v(" "),r("p",[e._v("在这篇文章中,我们准备结合我们所学到的东西和webpack如何构建依赖图的高级解释连在一起")]),e._v(" "),r("p",[e._v("依赖图是webpack中的一个关键架构,我们相信,只要我们知道了他是如何工作的,就能给我们带来更远的眼界.(就是看webpack 看得更透彻了)")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=4tQiJaFzuJ8",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),r("OutboundLink")],1),e._v("作者贴了一个youtube的链接, 是作者在一次演讲中对webpack 一次解析, 他建议配套观赏,没字幕,英文字幕都没,而且还很长有一个半小时,有兴趣的可以去看一下.")]),e._v(" "),r("h2",{attrs:{id:"第一步-初始化-compiler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一步-初始化-compiler","aria-hidden":"true"}},[e._v("#")]),e._v(" 第一步,初始化(Compiler)")]),e._v(" "),r("p",[e._v("设置我们已经拥有的webpack配置(所谓的编译选项), 当webpack运行的时候我们遇到的第一个Tapable实例就是"),r("code",[e._v("Compiler")]),e._v(". 因为他只负责触发"),r("code",[e._v("run")]),e._v(", "),r("code",[e._v("failed")]),e._v(", "),r("code",[e._v("done")]),e._v("这些高级事件,所以他是一个中央调度器, 这个编译器(Compiler) 始终会返回一个"),r("code",[e._v("Compilation")]),e._v(", 和其他的一些重要的tapable实例,例如"),r("code",[e._v("NormalModuleFactory")]),e._v(", "),r("code",[e._v("ContextModuleFactory")])]),e._v(" "),r("p",[r("img",{attrs:{src:"/webpackguide/compiler_run.png",alt:"图片描述"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"/webpackguide/compile.png",alt:"图片描述"}})]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/thelarkinn/artsy-webpack-tour",target:"_blank",rel:"noopener noreferrer"}},[e._v("你可以在这里找到所有的注释"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("当"),r("code",[e._v("Compiler")]),e._v(" 实例化了编译所需的插件和对象之后, 他会返回一个"),r("code",[e._v("nwe Cpmpilation")])]),e._v(" "),r("h2",{attrs:{id:"第二步-开始编译-此处用的是-compilation-构建依赖图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二步-开始编译-此处用的是-compilation-构建依赖图","aria-hidden":"true"}},[e._v("#")]),e._v(" 第二步 开始编译 此处用的是 Compilation (构建依赖图)")]),e._v(" "),r("p",[e._v("在Compilation 之后 (第二个Tapable实例)")]),e._v(" "),r("p",[e._v("我们把你应用的依赖图描述成为"),r("code",[e._v("Compilation")]),e._v(", 就好像把一个人描述成一个对象一样,我们必须要在某处有一个跟节点,然后分支出其他的节点")]),e._v(" "),r("p",[e._v("我们正在描述的就是你的配置的入口属性,")]),e._v(" "),r("p",[e._v("即使我们提供了入口点路径,webpack 还是需要确认那个路径存不存在,下面我们将会开启一组递归操作")]),e._v(" "),r("h3",{attrs:{id:"resolve-resolve-实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resolve-resolve-实例","aria-hidden":"true"}},[e._v("#")]),e._v(" Resolve(Resolve 实例)")]),e._v(" "),r("p",[e._v("任何时候都可以提供一个原请求(模块的路径),在这个例子中,就是入口点,webpack会首先发送这些路径信息给Resolve实例去解析得到入口文件.Resolve 实例会用 "),r("a",{attrs:{href:"https://github.com/webpack/enhanced-resolve",target:"_blank",rel:"noopener noreferrer"}},[e._v("增强的nodejs 正则模版"),r("OutboundLink")],1),e._v("去确定该路径是否存在该模块,然后返回一个关于Resolve 模块的额外的信息, 这个信息包含文件系统统计信息,绝对路径,和Resolve模块的唯一ID标识")]),e._v(" "),r("p",[r("img",{attrs:{src:"/webpackguide/module_factory.png",alt:"图片描述"}})]),e._v(" "),r("ul",[r("li",[r("p",[r("a",{attrs:{href:"https://github.com/webpack/webpack/blob/c71fd05f98a752753b9450f590c970b76379803d/lib/Compilation.js#L142-L178",target:"_blank",rel:"noopener noreferrer"}},[e._v("创建模块 :"),r("OutboundLink")],1),e._v(" 然后Resolve 会 在原信息在内存中或者缓存中被捕获的时候. 发送 resolve 模块信息到NormalMouduleFactory.")])]),e._v(" "),r("li",[r("p",[e._v("Parse 模块: 模块工厂会指定Parser 实例到每一个工厂创建的"),r("code",[e._v("NormalModule")]),e._v(",在模块源存储之后,"),r("code",[e._v("Parser")]),e._v("会分析这个模块,此外,他还会通过被称作"),r("code",[e._v("loaders")]),e._v("(loader 概念不懂得可以查看官方文档)一系列的转换去发送"),r("code",[e._v("Module")]),e._v(",一个loader链在最后都会返回一个JavaScript代码,因此,"),r("code",[e._v("Parser")]),e._v("现在可以开始解析源码并且声称AST(抽象语法树)了")])]),e._v(" "),r("li",[r("p",[e._v("寻找依赖, 现在我们在AST上有了模块的信息,"),r("a",{attrs:{href:"https://github.com/webpack/webpack/blob/c71fd05f98a752753b9450f590c970b76379803d/lib/Parser.js#L678-L738",target:"_blank",rel:"noopener noreferrer"}},[e._v("我们可以为特定类型的语句和表达式遍历AST了"),r("OutboundLink")],1),e._v(",我们要寻找的是我们定义的依赖说明,因此,当"),r("code",[e._v("Parse")]),e._v("遍历AST 并且遇上"),r("code",[e._v("require(foo)")]),e._v("这样的信息的时候,那么这个信息就会存储到"),r("code",[e._v("Dependeny")]),e._v("实例,并且把他跟原来的模块关联起来(链表的概念)")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"/webpackguide/parser.png",alt:"图片描述"}})]),e._v(" "),r("ul",[r("li",[e._v("重复执行: 一旦模块的所有的依赖都被找到了,我们需要"),r("a",{attrs:{href:"https://github.com/webpack/webpack/blob/c71fd05f98a752753b9450f590c970b76379803d/lib/Compilation.js#L180-L205",target:"_blank",rel:"noopener noreferrer"}},[e._v("处理"),r("OutboundLink")],1),e._v("他们,这就是递归发生的地方(前面的链接),每一个模块都要执行上面的操作来找到他们依赖的模块.")])]),e._v(" "),r("p",[r("img",{attrs:{src:"/webpackguide/all.png",alt:"图片描述"}})]),e._v(" "),r("p",[e._v("译者注: webpack 大概的流程说得挺清楚明白的,就下来就是要看各位骚操作的时候了")])])},[],!1,null,null,null);a.default=o.exports}}]);